---
layout: post
comments: true
title:  "Automatisation en utilisant des cl√©s SSH"
ref: ssh_keys
date:   2020-08-02 08:00:00 +0200
categories: blogue automatisation
category: blogue
lang: fr
---

J'ai commenc√© mon blogue avec un article de blogue sur comment sauver les identifiants git pour les sites internet ne supportant pas les cl√©s SSH (c'est par [ici](/blogue/dev/2019/09/09/sauver-les-identifiants-git.html) pour ceux qui sont int√©ress√©s).
√Ä ce moment, j'√©tais dans l'impossibilit√© d'utiliser les cl√©s SSH sur les serveurs d'Overleaf (et c'est toujours le cas au moment o√π j'√©cris).
Cela m'a aid√© pour ce cas particulier.
N√©anmoins, cette astuce fonctionne uniquement pour les serveurs git.
De plus, ce n'est pas le meilleur moyen pour automatiser ses connexions (au moins de mon point de vue).
Aujourd'hui, nous allons voir comment utiliser les cl√©s SSH pour automatiser plusieurs √©tapes d'identifications.

Dans cet article de blogue, nous allons voir deux cas d'utilisation:
* Identification automatique √† des serveurs utilisant le protocole SSH.
* Identification automatique lors de commandes push/push sur des serveurs git (comme GitHub ou GitLab).

Les cl√©s SSH sont compos√©es d'une cl√© publique pour encoder les messages (destin√© aux serveurs) et une cl√© priv√©e afin de lire ces messages (destin√© pour le client du serveur).
Si vous voulez plus d'information sur ce protocole, allez voir [ici](https://delicious-insights.com/fr/articles/comprendre-et-maitriser-les-cles-ssh/).

La distribution utilis√©e (et test√©e) pour ce tutoriel est Kubuntu 20.04 LTS (ma nouvelle distribution, mais c'est pour un futur article de blogue).

# Pr√©parer le c√¥t√© client

Dans cette section, nous allons pr√©parer le client qu'il puisse s'identifier automatiquement sur les serveurs.
D'abord, cr√©ons une paire de cl√©s publique et priv√©e.
Enfin, nous d√©marrerons l'agent de cl√©s SSH pour le configurer avec la cl√© priv√©e.

## V√©rifiez la pr√©sence d'une paire de cl√©s SSH

Pour cela il faut regarder dans le dossier `~/.ssh/` pour voir si vous avez d√©j√† une cl√© publique SSH.
Par d√©faut, le nom de fichier d'une cl√© publique est `id_rsa.pub`.
Vous pouvez utiliser une paire diff√©rente de cl√©s par serveur si vous voulez.
Je pr√©f√®re garder une paire de cl√©s par machine (et en changer r√©guli√®rement).

## G√©n√©rer une paire de cl√©s SSH

Pour g√©n√©rer une paire de cl√©s li√©es √† une adresse email (pour mieux identifier l'utilisateur connect√©) vous devez √©crire la ligne suivante:
```bash
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
```
Ensuite, vous devez suivre les instructions.
Vous pouvez laisser le chemin des cl√©s par d√©faut si vous n'avez pas d√©j√† une paire de cl√©s.
Vous allez √©galement d√©finir un mot de passe pour d√©verrouiller votre cl√© priv√©e, soyez certain de vous en rappeler.
**Faites √©galement attention de ne pas r√©v√©ler votre cl√© priv√©e (le fichier `id_rsa`) en toutes circonstances.**

## D√©marrer l'agent de cl√© SSH et ajouter votre cl√© priv√©e

Pour laisser votre syst√®me se souvenir de votre cl√© priv√©e durant votre session, vous pouvez utiliser l'agent SSH comme suit:
```bash
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
```

Maintenant, nous avons une paire de cl√©s priv√©e et publique ainsi que l'agent de cl√© SSH de configur√©s.
Nous sommes pr√™ts pour automatiser les identifications SSH vers des serveurs SSH et/ou serveur git.

# Automatisez votre connexion sur les serveurs en utilisant SSH

Pour automatiser l'√©tape de saisie de votre mot de passe, vous pouvez ajouter votre cl√© publique dans la liste des cl√©s autoris√©es de vos serveurs.
Avant √ßa, assurez-vous que votre espace utilisateur distant contienne le dossier `~/ssh`:
```bash
ssh <identifiant>@<adresse_serveur> mkdir -p .ssh
```

Ensuite, vous devez ajouter votre cl√© publique dans le fichier des cl√©s autoris√©es de vos serveurs:
```bash
cat ~/.ssh/id_rsa.pub | ssh <identifiant>@<adresse_serveur> 'cat >> .ssh/authorized_keys'
```

Maintenant, votre serveur est configur√© avec votre paire de cl√©s SSH.
Vous pouvez r√©p√©ter ces deux √©tapes pour chaque serveur dont vous avez acc√®s.

# Automatiser vos authentifications sur les serveurs Git

Pour automatiser vos authentifications (√©crire votre identifiant et votre mot de passe) apr√®s l'utilisation d'une commande `push`/`pull`, vous devez ajouter votre cl√© publique dans le serveur git (en utilisant l'interface web du serveur git).
Pour copier votre cl√© publique sur un site internet (tel que GitHub ou GitLab) vous pouvez ajouter votre cl√© dans le presse-papier (pour utiliser Ctrl+V √† l'int√©rieur de votre navigateur internet).

√Ä cette fin, vous devez installer `xclip`:
```bash
sudo apt install xclip
```

ou si vous √™tes sur manjaro:
```bash
sudo pamac install xclip
```

Ensuite, c'est aussi simple que suit:
```bash
xclip -sel clip < ~/.ssh/id_rsa.pub
```

Apr√®s, suivez les √©tapes de ce [lien](https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account) (en anglais, mais tr√®s bien illustr√©) pour GitHub et de cet autre [lien](https://docs.gitlab.com/ee/ssh/#add-an-ssh-key-to-your-gitlab-account) (en anglais, mais la documentation officielle n'est pas traduite en fran√ßais) pour GitLab.

Maintenant, votre configuration est pr√™te pour votre serveur Git.
La prochaine sous-section expliquera comment tester cette configuration sans avoir √† modifier l'un de vos r√©pertoires.

## Tester votre configuration

Pour tester votre nouvelle configuration sur vos serveurs git, vous pouvez utiliser le protocole SSH.
Cela vous √©vitera de modifier un de vos r√©pertoires distants.
Les prochaines sous-sections vous montrent comment faire avec les serveurs les plus populaires.

### GitHub

```bash
ssh -T git@github.com
```
### GitLab

```bash
ssh -T git@gitlab.com
```

# Garder les identit√©s de l'agent SSH sur Kubuntu 22.04 apr√®s un red√©marrage

Avec les pr√©c√©dentes instructions, vous devez (du moins dans Kubuntu) reconfigurer votre agent SSH apr√®s chaque red√©marrage ou d√©connexion.
Dans cette sous-section, nous allons utiliser kwallet pour outrepasser cette limitation.

D'abord, nous devons installer le paquet `ssh-askpass`:
```bash
sudo apt install ssh-askpass
```

Ensuite, nous devons cr√©er un script qui va automatiquement d√©verrouiller votre cl√© priv√©e lorsque vous vous connectez.
Ceci est fait par les lignes suivantes:
```bash
mkdir -p ~/.config/autostart-scripts
echo '#!/bin/sh' > ~/.config/autostart-scripts/ssh-add.sh
echo 'export SSH_ASKPASS=/usr/bin/ksshaskpass' >> ~/.config/autostart-scripts/ssh-add.sh
echo 'ssh-add < /dev/null' >> ~/.config/autostart-scripts/ssh-add.sh
chmod +x ~/.config/autostart-scripts/ssh-add.sh
```

L'√©tape suivante consiste √† taper la commande suivante et de **cocher la case pour se souvenir du mot de passe**:
```bash
~/.config/autostart-scripts/ssh-add.sh
```
Cela va permettre √† kwallet (portefeuille de cl√©s de KDE) de retenir le mot de passe pour votre cl√© priv√©e et la d√©bloquer apr√®s chaque connexion.

# Garder les identit√©s de l'agent SSH sur Manjaro apr√®s un red√©marrage

Apr√®s mon passage sur Manjaro linux ([voir mon post sur ma migration](/blogue/2022/09/03/mon-passage-a-manjaro.html)), je me suis aper√ßu que la m√©thode pour Kubuntu ne fonctionnait pas (et risque de ne pas fonctionner sur les prochaines LTS). Voici ma solution, qui est une combinaison de deux approches que vous pouvez retrouver dans mes sources.

Tout d'abord, assurez-vous d'avoir le n√©cessaire¬†:

```bash
sudo pamac install kwallet ksshaskpass kwalletmanager
```

Ensuite, configurons notre syst√®me et zsh pour utiliser les voix de communications adapt√©es √† l'agent ssh:
```bash
sudo echo "#!/bin/sh" > /etc/profile.d/ssh-askpass.sh
sudo echo "export SSH_ASKPASS=/usr/bin/ksshaskpass" >> /etc/profile.d/ssh-askpass.sh
echo "export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR"/ssh-agent.socket" >> ~/.zsherc
```

Ensuite, nous cr√©ons le r√©pertoire utilisateur pour systemd:

```bash
mkdir -p ~/.config/systemd/user
```

Ensuite, cr√©ez le fichier `~/.config/systemd/user/ssh-agent.service` et remplissez-le avec le contenu de l'encadr√© suivant¬†:

```bash
[Unit]
Description=SSH agent (ssh-agent)

[Service]
Type=simple
Environment=SSH_AUTH_SOCK=%t/ssh-agent.socket
Environment=DISPLAY=:0
Environment=KEY_FILE=/home/%u/.ssh/id_rsa
ExecStart=ssh-agent -D -a $SSH_AUTH_SOCK
ExecStartPost=/bin/sleep 3
ExecStartPost=/usr/bin/ssh-add $KEY_FILE
ExecStop=kill -15 $MAINPID

[Install]
WantedBy=default.target
```

Ce service lance l'agent ssh √† chaque authentification et ajoute la cl√© priv√©e que vous avez cr√©√©e en d√©but de cet article.
Nous allons maintenant l'activer et le lancer¬†:

```bash
systemctl --user daemon-reload
systemctl --user enable ssh-agent.service
systemctl --user start ssh-agent.service
```

Voil√†, on est bon, en esp√©rant que cela vous a √©t√© utile üòâ.


# Sources et inspirations

* [Instructions officielles de GitHub pour les cl√©s SSH](https://help.github.com/en/github/authenticating-to-github)
* [Instructions officielles de GitLab pour les cl√©s SSH](https://docs.gitlab.com/ee/ssh/)
* [Configurer l'agent de cl√© SSH d'Ubuntu](http://www.linuxproblem.org/art_9.html)
* [Kubuntu et l'agent de cl√© SSH](https://wiki.csnu.org/index.php/Kubuntu_/_KDE_:_login_ssh_automatique_par_cl%C3%A9)
* [Manjaro et l'agent de cl√© SSH (1/2)](https://forum.manjaro.org/t/configuring-ssh-agent-to-autostart-and-automatically-add-ssh-keys-to-it/99715)
* [Manjaro et l'agent de cl√© SSH (2/2)](https://forum.manjaro.org/t/howto-use-kwallet-as-a-login-keychain-for-storing-ssh-key-passphrases-on-kde/7088)

J‚Äôesp√®re que cela aidera certains d‚Äôentre vous.

√Ä la revoyure, Vincent.
